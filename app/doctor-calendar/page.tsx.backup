'use client';

import { useState, useEffect, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { useDoctorAuth } from '@/contexts/DoctorAuthContext';
import { motion, AnimatePresence } from 'framer-motion';
import { Calendar, Views, momentLocalizer } from 'react-big-calendar';
import moment from 'moment';
import 'react-big-calendar/lib/css/react-big-calendar.css';
import {
  ArrowLeft,
  Calendar as CalendarIcon,
  Clock,
  User,
  Phone,
  Mail,
  FileText,
  CheckCircle,
  XCircle,
  AlertCircle,
  Filter,
  Search,
  Eye,
  Edit,
  Trash2,
  Plus,
  Settings,
  RefreshCw,
  CalendarDays,
  Clock as ClockIcon
} from 'lucide-react';

const localizer = momentLocalizer(moment);

interface Appointment {
  id: string;
  patientId: string;
  doctorId: string;
  doctorName: string;
  specialty: string;
  date: string;
  time: string;
  appointmentType: string;
  notes: string;
  tokenNumber: string;
  status: 'confirmed' | 'completed' | 'cancelled' | 'pending' | 'rescheduled';
  patientName?: string;
  patientPhone?: string;
  patientEmail?: string;
  originalDate?: string;
  originalTime?: string;
  rescheduledAt?: string;
}

interface CalendarEvent {
  id: string;
  title: string;
  start: Date;
  end: Date;
  resource: Appointment;
  backgroundColor?: string;
  borderColor?: string;
}

export default function DoctorCalendar() {
  const { doctor } = useDoctorAuth();
  const router = useRouter();
  const [appointments, setAppointments] = useState<Appointment[]>([]);
  const [events, setEvents] = useState<CalendarEvent[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedEvent, setSelectedEvent] = useState<CalendarEvent | null>(null);
  const [showEventModal, setShowEventModal] = useState(false);
  const [showCancelModal, setShowCancelModal] = useState(false);
  const [showRescheduleModal, setShowRescheduleModal] = useState(false);
  const [eventToCancel, setEventToCancel] = useState<CalendarEvent | null>(null);
  const [eventToReschedule, setEventToReschedule] = useState<CalendarEvent | null>(null);
  const [filter, setFilter] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [rescheduleDate, setRescheduleDate] = useState('');
  const [rescheduleTime, setRescheduleTime] = useState('');
  const [isDragging, setIsDragging] = useState(false);

  useEffect(() => {
    if (doctor === undefined) return;
    if (!doctor) {
      router.push('/doctor-login');
    } else {
      loadAppointments();
    }
  }, [doctor]);

  const loadAppointments = async () => {
    try {
      setLoading(true);
      
      // Fetch all appointments
      const appointmentsResponse = await fetch('http://localhost:3001/appointments');
      const allAppointments = await appointmentsResponse.json();
      
      // Filter appointments for this doctor
      const doctorAppointments = allAppointments.filter((apt: any) => apt.doctorId === doctor?.id);
      
      // Fetch patient profiles to get patient information
      const patientsResponse = await fetch('http://localhost:3001/patient-profile');
      const patientsData = await patientsResponse.json();
      
      // Add patient information to appointments
      const appointmentsWithPatientInfo = doctorAppointments.map((apt: any) => {
        const patient = patientsData.find((p: any) => p.id === apt.patientId);
        return {
          ...apt,
          patientName: patient ? patient.name : 'Unknown Patient',
          patientPhone: patient ? patient.phone : 'N/A',
          patientEmail: patient ? patient.email : 'N/A'
        };
      });
      
      setAppointments(appointmentsWithPatientInfo);
      convertToCalendarEvents(appointmentsWithPatientInfo);
    } catch (error) {
      console.error('Failed to load appointments:', error);
    } finally {
      setLoading(false);
    }
  };

  const convertToCalendarEvents = (appointments: Appointment[]) => {
    const calendarEvents: CalendarEvent[] = appointments.map(apt => {
      const startTime = moment(`${apt.date} ${apt.time}`, 'YYYY-MM-DD hh:mm A');
      const endTime = startTime.clone().add(30, 'minutes'); // Default 30 min duration
      
      let backgroundColor = '#3B82F6'; // Default blue
      let borderColor = '#2563EB';
      
      switch (apt.status) {
        case 'confirmed':
          backgroundColor = '#10B981'; // Green
          borderColor = '#059669';
          break;
        case 'pending':
          backgroundColor = '#F59E0B'; // Yellow
          borderColor = '#D97706';
          break;
        case 'cancelled':
          backgroundColor = '#EF4444'; // Red
          borderColor = '#DC2626';
          break;
        case 'completed':
          backgroundColor = '#6B7280'; // Gray
          borderColor = '#4B5563';
          break;
        case 'rescheduled':
          backgroundColor = '#8B5CF6'; // Purple
          borderColor = '#7C3AED';
          break;
      }

      return {
        id: apt.id,
        title: `${apt.patientName} - ${apt.appointmentType}`,
        start: startTime.toDate(),
        end: endTime.toDate(),
        resource: apt,
        backgroundColor,
        borderColor
      };
    });
    
    setEvents(calendarEvents);
  };

  const handleEventSelect = (event: CalendarEvent) => {
    setSelectedEvent(event);
    setShowEventModal(true);
  };

  const handleEventDrop = useCallback(async ({ event, start, end }: any) => {
    try {
      setIsDragging(false);
      const updatedEvent = { ...event, start, end };
      
      // Update the appointment in the database
      const response = await fetch(`http://localhost:3001/appointments/${event.id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          date: moment(start).format('YYYY-MM-DD'),
          time: moment(start).format('hh:mm A'),
          status: 'rescheduled',
          originalDate: event.resource.date,
          originalTime: event.resource.time,
          rescheduledAt: new Date().toISOString()
        }),
      });

      if (response.ok) {
        // Reload appointments to get updated data
        await loadAppointments();
      }
    } catch (error) {
      console.error('Failed to update appointment:', error);
    }
  }, []);

  const handleEventResize = useCallback(async ({ event, start, end }: any) => {
    try {
      const updatedEvent = { ...event, start, end };
      
      // Update the appointment in the database
      const response = await fetch(`http://localhost:3001/appointments/${event.id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          date: moment(start).format('YYYY-MM-DD'),
          time: moment(start).format('hh:mm A'),
          status: 'rescheduled',
          originalDate: event.resource.date,
          originalTime: event.resource.time,
          rescheduledAt: new Date().toISOString()
        }),
      });

      if (response.ok) {
        await loadAppointments();
      }
    } catch (error) {
      console.error('Failed to update appointment:', error);
    }
  }, []);

  const handleCancelAppointment = async () => {
    if (!eventToCancel) return;
    
    try {
      const response = await fetch(`http://localhost:3001/appointments/${eventToCancel.id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ status: 'cancelled' }),
      });

      if (response.ok) {
        await loadAppointments();
        setShowCancelModal(false);
        setEventToCancel(null);
      }
    } catch (error) {
      console.error('Failed to cancel appointment:', error);
    }
  };

  const handleRescheduleAppointment = async () => {
    if (!eventToReschedule || !rescheduleDate || !rescheduleTime) return;
    
    try {
      const response = await fetch(`http://localhost:3001/appointments/${eventToReschedule.id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          date: rescheduleDate,
          time: rescheduleTime,
          status: 'rescheduled',
          originalDate: eventToReschedule.resource.date,
          originalTime: eventToReschedule.resource.time,
          rescheduledAt: new Date().toISOString()
        }),
      });

      if (response.ok) {
        await loadAppointments();
        setShowRescheduleModal(false);
        setEventToReschedule(null);
        setRescheduleDate('');
        setRescheduleTime('');
      }
    } catch (error) {
      console.error('Failed to reschedule appointment:', error);
    }
  };

  const openRescheduleModal = (event: CalendarEvent) => {
    setEventToReschedule(event);
    setRescheduleDate(moment(event.start).format('YYYY-MM-DD'));
    setRescheduleTime(moment(event.start).format('HH:mm'));
    setShowRescheduleModal(true);
    setShowEventModal(false);
  };

  const getFilteredEvents = () => {
    let filtered = events;

    if (filter !== 'all') {
      filtered = filtered.filter(event => event.resource.status === filter);
    }

    if (searchTerm) {
      filtered = filtered.filter(event => 
        event.resource.patientName?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        event.resource.appointmentType.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    return filtered;
  };

  const eventStyleGetter = (event: CalendarEvent) => {
    return {
      style: {
        backgroundColor: event.backgroundColor,
        borderColor: event.borderColor,
        borderRadius: '8px',
        border: '2px solid',
        color: 'white',
        fontWeight: 'bold',
        fontSize: '12px',
        padding: '4px 8px',
        cursor: 'grab',
        opacity: isDragging ? 0.7 : 1,
        transform: isDragging ? 'scale(1.05)' : 'scale(1)',
        transition: 'all 0.2s ease'
      }
    };
  };

  const handleDragStart = () => {
    setIsDragging(true);
  };

  const handleDragEnd = () => {
    setIsDragging(false);
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 flex items-center justify-center">
        <div className="text-center">
          <div className="w-12 h-12 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-600">Loading calendar...</p>
        </div>
      </div>
    );
  }

  if (!doctor) {
    return null;
  }

  const filteredEvents = getFilteredEvents();

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50">
      {/* Header */}
      <motion.div 
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="bg-white/80 backdrop-blur-sm shadow-lg border-b border-white/20"
      >
        <div className="px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Link 
                href="/doctor-dashboard"
                className="w-10 h-10 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center shadow-lg hover:shadow-xl transition-all duration-300"
              >
                <ArrowLeft className="h-5 w-5 text-white" />
              </Link>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">Appointment Calendar</h1>
                <p className="text-gray-600">Drag and drop to reschedule appointments</p>
              </div>
            </div>
            <div className="flex items-center space-x-3">
              <button
                onClick={loadAppointments}
                className="p-2 bg-blue-100 hover:bg-blue-200 rounded-xl transition-colors"
                title="Refresh"
              >
                <RefreshCw className="h-5 w-5 text-blue-600" />
              </button>
              <Link
                href="/doctor-appointments"
                className="px-4 py-2 bg-green-600 text-white rounded-xl hover:bg-green-700 transition-colors"
              >
                List View
              </Link>
            </div>
          </div>
        </div>
      </motion.div>

      <div className="p-6 space-y-6">
        {/* Filters and Search */}
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
          className="bg-white/80 backdrop-blur-sm rounded-2xl p-6 shadow-lg border border-white/20"
        >
          <div className="flex flex-col md:flex-row gap-4">
            {/* Search */}
            <div className="flex-1 relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
              <input
                type="text"
                placeholder="Search by patient name or appointment type..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-3 rounded-xl border border-gray-200 focus:border-blue-500 focus:ring-4 focus:ring-blue-100 transition-all duration-300"
              />
            </div>

            {/* Status Filter */}
            <div className="flex items-center space-x-2">
              <Filter className="h-5 w-5 text-gray-500" />
              <select
                value={filter}
                onChange={(e) => setFilter(e.target.value)}
                className="px-4 py-3 rounded-xl border border-gray-200 focus:border-blue-500 focus:ring-4 focus:ring-blue-100 transition-all duration-300"
              >
                <option value="all">All Status</option>
                <option value="confirmed">Confirmed</option>
                <option value="pending">Pending</option>
                <option value="completed">Completed</option>
                <option value="cancelled">Cancelled</option>
                <option value="rescheduled">Rescheduled</option>
              </select>
            </div>
          </div>
        </motion.div>

        {/* Calendar */}
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="bg-white/80 backdrop-blur-sm rounded-2xl p-6 shadow-lg border border-white/20"
        >
          <div className="h-[600px]">
            <Calendar
              localizer={localizer}
              events={filteredEvents}
              startAccessor="start"
              endAccessor="end"
              style={{ height: '100%' }}
              onSelectEvent={handleEventSelect}
              onEventDrop={handleEventDrop}
              onEventResize={handleEventResize}
              eventPropGetter={eventStyleGetter}
              selectable
              resizable
              defaultView={Views.WEEK}
              views={['month', 'week', 'day']}
              step={30}
              timeslots={2}
              tooltipAccessor={(event) => `${event.resource.patientName} - ${event.resource.appointmentType}`}
              onDragStart={handleDragStart}
              onDragEnd={handleDragEnd}
            />
          </div>
        </motion.div>
      </div>

      {/* Event Details Modal */}
      <AnimatePresence>
        {showEventModal && selectedEvent && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.9 }}
              className="bg-white rounded-2xl p-6 max-w-md w-full max-h-[80vh] overflow-y-auto"
            >
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-xl font-bold text-gray-900">Appointment Details</h3>
                <button
                  onClick={() => setShowEventModal(false)}
                  className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                >
                  <XCircle className="h-5 w-5 text-gray-500" />
                </button>
              </div>
              
              <div className="space-y-4">
                <div className="text-center">
                  <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-full flex items-center justify-center mx-auto mb-3">
                    <User className="h-8 w-8 text-white" />
                  </div>
                  <h4 className="text-lg font-semibold text-gray-900">{selectedEvent.resource.patientName}</h4>
                  <p className="text-blue-600 font-medium">{selectedEvent.resource.appointmentType}</p>
                </div>
                
                <div className="space-y-3">
                  <div className="flex items-center space-x-3">
                    <CalendarIcon className="h-4 w-4 text-gray-500" />
                    <span className="text-sm text-gray-700">
                      {moment(selectedEvent.start).format('dddd, MMMM Do, YYYY')}
                    </span>
                  </div>
                  <div className="flex items-center space-x-3">
                    <Clock className="h-4 w-4 text-gray-500" />
                    <span className="text-sm text-gray-700">
                      {moment(selectedEvent.start).format('h:mm A')} - {moment(selectedEvent.end).format('h:mm A')}
                    </span>
                  </div>
                  <div className="flex items-center space-x-3">
                    <Phone className="h-4 w-4 text-gray-500" />
                    <span className="text-sm text-gray-700">{selectedEvent.resource.patientPhone}</span>
                  </div>
                  <div className="flex items-center space-x-3">
                    <Mail className="h-4 w-4 text-gray-500" />
                    <span className="text-sm text-gray-700">{selectedEvent.resource.patientEmail}</span>
                  </div>
                  <div className="flex items-center space-x-3">
                    <FileText className="h-4 w-4 text-gray-500" />
                    <span className="text-sm text-gray-700">Token: {selectedEvent.resource.tokenNumber}</span>
                  </div>
                </div>

                {selectedEvent.resource.notes && (
                  <div className="bg-gray-50 rounded-xl p-4">
                    <h5 className="font-semibold text-gray-900 mb-2">Patient Notes:</h5>
                    <p className="text-gray-700 text-sm">{selectedEvent.resource.notes}</p>
                  </div>
                )}

                <div className="flex items-center space-x-2">
                  <span className={`px-3 py-1 rounded-full text-xs font-semibold flex items-center space-x-1 ${
                    selectedEvent.resource.status === 'confirmed' ? 'bg-green-100 text-green-800' :
                    selectedEvent.resource.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                    selectedEvent.resource.status === 'cancelled' ? 'bg-red-100 text-red-800' :
                    selectedEvent.resource.status === 'rescheduled' ? 'bg-purple-100 text-purple-800' :
                    'bg-gray-100 text-gray-800'
                  }`}>
                    {selectedEvent.resource.status === 'confirmed' ? <CheckCircle className="h-4 w-4" /> :
                     selectedEvent.resource.status === 'pending' ? <Clock className="h-4 w-4" /> :
                     selectedEvent.resource.status === 'cancelled' ? <XCircle className="h-4 w-4" /> :
                     selectedEvent.resource.status === 'rescheduled' ? <CalendarDays className="h-4 w-4" /> :
                     <CheckCircle className="h-4 w-4" />}
                    <span className="capitalize">{selectedEvent.resource.status}</span>
                  </span>
                </div>

                <div className="flex space-x-3 pt-4 border-t border-gray-200">
                  <button
                    onClick={() => openRescheduleModal(selectedEvent)}
                    className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2"
                  >
                    <Edit className="h-4 w-4" />
                    <span>Reschedule</span>
                  </button>
                  <button
                    onClick={() => {
                      setEventToCancel(selectedEvent);
                      setShowCancelModal(true);
                      setShowEventModal(false);
                    }}
                    className="flex-1 px-4 py-2 bg-red-600 text-white rounded-xl hover:bg-red-700 transition-colors flex items-center justify-center space-x-2"
                  >
                    <Trash2 className="h-4 w-4" />
                    <span>Cancel</span>
                  </button>
                </div>
              </div>
            </motion.div>
          </div>
        )}
      </AnimatePresence>

      {/* Cancel Confirmation Modal */}
      <AnimatePresence>
        {showCancelModal && eventToCancel && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.9 }}
              className="bg-white rounded-2xl p-6 max-w-md w-full"
            >
              <div className="text-center">
                <AlertCircle className="h-16 w-16 text-red-500 mx-auto mb-4" />
                <h3 className="text-xl font-bold text-gray-900 mb-2">Cancel Appointment</h3>
                <p className="text-gray-600 mb-6">
                  Are you sure you want to cancel the appointment with{' '}
                  <strong>{eventToCancel.resource.patientName}</strong> on{' '}
                  {moment(eventToCancel.start).format('MMMM Do, YYYY')} at{' '}
                  {moment(eventToCancel.start).format('h:mm A')}?
                </p>
                
                <div className="flex space-x-3">
                  <button
                    onClick={handleCancelAppointment}
                    className="flex-1 px-4 py-2 bg-red-600 text-white rounded-xl hover:bg-red-700 transition-colors"
                  >
                    Yes, Cancel
                  </button>
                  <button
                    onClick={() => {
                      setShowCancelModal(false);
                      setEventToCancel(null);
                    }}
                    className="flex-1 px-4 py-2 bg-gray-600 text-white rounded-xl hover:bg-gray-700 transition-colors"
                  >
                    No, Keep
                  </button>
                </div>
              </div>
            </motion.div>
          </div>
        )}
      </AnimatePresence>

      {/* Reschedule Modal */}
      <AnimatePresence>
        {showRescheduleModal && eventToReschedule && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.9 }}
              className="bg-white rounded-2xl p-6 max-w-md w-full"
            >
              <div className="text-center mb-6">
                <CalendarDays className="h-16 w-16 text-blue-500 mx-auto mb-4" />
                <h3 className="text-xl font-bold text-gray-900 mb-2">Reschedule Appointment</h3>
                <p className="text-gray-600">
                  Reschedule appointment with <strong>{eventToReschedule.resource.patientName}</strong>
                </p>
              </div>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">New Date</label>
                  <input
                    type="date"
                    value={rescheduleDate}
                    onChange={(e) => setRescheduleDate(e.target.value)}
                    className="w-full px-4 py-3 rounded-xl border border-gray-200 focus:border-blue-500 focus:ring-4 focus:ring-blue-100 transition-all duration-300"
                    min={new Date().toISOString().split('T')[0]}
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">New Time</label>
                  <input
                    type="time"
                    value={rescheduleTime}
                    onChange={(e) => setRescheduleTime(e.target.value)}
                    className="w-full px-4 py-3 rounded-xl border border-gray-200 focus:border-blue-500 focus:ring-4 focus:ring-blue-100 transition-all duration-300"
                  />
                </div>
              </div>
              
              <div className="flex space-x-3 mt-6">
                <button
                  onClick={handleRescheduleAppointment}
                  disabled={!rescheduleDate || !rescheduleTime}
                  className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Reschedule
                </button>
                <button
                  onClick={() => {
                    setShowRescheduleModal(false);
                    setEventToReschedule(null);
                    setRescheduleDate('');
                    setRescheduleTime('');
                  }}
                  className="flex-1 px-4 py-2 bg-gray-600 text-white rounded-xl hover:bg-gray-700 transition-colors"
                >
                  Cancel
                </button>
              </div>
            </motion.div>
          </div>
        )}
      </AnimatePresence>
    </div>
  );
} 